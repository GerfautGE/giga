1,5c1
< use std::{
<     error::Error,
<     io::Write,
<     process::{Command, Stdio},
< };
---
> use std::{error::Error, process::Command};
9,23c5,14
< type Diff = Vec<DiffLine>;
< enum DiffType {
<     /// The line has been modified
<     Modified,
<     /// The line has been added
<     Added,
<     /// The line has been removed
<     Removed,
< }
< /// A line in the diff
< struct DiffLine {
<     /// The line number
<     line: usize,
<     /// The type of modification
<     diff_type: DiffType,
---
> pub type Diff = Vec<Patches>;
> 
> #[derive(Debug, PartialEq)]
> pub enum Patches {
>     /// {count} lines have been modified starting at {start}
>     Modified { start: usize, count: usize },
>     /// {count} lines have been added starting at {start}
>     Added { start: usize, count: usize },
>     /// Lines have been removed starting at {start}
>     Removed { start: usize },
47c38
<     let diff_output = Command::new("bash")
---
>     let mut diff_output = Command::new("bash")
49,50d39
<         .stdout(Stdio::piped())
<         // .stderr(Stdio::piped())
53c42
<             "diff -u <(git show HEAD:{}) <(echo '{}')",
---
>             "diff <(git show HEAD:{}) <(echo '{}')",
56,57c45
<         .spawn()?
<         .wait_with_output()?;
---
>         .output()?;
60a49,50
>         // Remove the trailing newline
>         diff_output.stdout.pop();
66a57,97
> /// Parse the diff result and return a vector of Patches
> /// The diff result is a string of the form:
> /// ```diff
> /// 1c1,3
> /// < Hello, World !
> /// ---
> /// > Hello
> /// > World
> /// >
> /// ```
> /// Only the lines starting with `@@` are parsed.
> pub fn parse_diff_result(diff: &str) -> Result<Diff, Box<dyn Error>> {
>     let mut result = vec![];
> 
>     for line in diff.lines() {
>         // We only care for lines starting with a digit (the line number)
>         if line.starts_with(char::is_numeric) {
>             // Add patch
>             if line.contains('a') {
>                 let parts = line.split('a').collect::<Vec<_>>();
>                 let mut added = parts[1].split(',');
>                 let start = added.next().unwrap_or_default().parse::<usize>()? - 1;
>                 let count = added.next().unwrap_or("1").parse::<usize>()?;
>                 result.push(Patches::Added { start, count });
>             } else if line.contains('d') {
>                 let parts = line.split('d').collect::<Vec<_>>();
>                 let start = parts[1].parse::<usize>()? - 1;
>                 result.push(Patches::Removed { start });
>             } else if line.contains('c') {
>                 let parts = line.split('c').collect::<Vec<_>>();
>                 let mut modified = parts[1].split(',');
>                 let start = modified.next().unwrap_or_default().parse::<usize>()? - 1;
>                 let count = modified.next().unwrap_or("1").parse::<usize>()?;
>                 result.push(Patches::Modified { start, count });
>             }
>         }
>     }
> 
>     Ok(result)
> }
> 
70a102
>         .current_dir(path)
74d105
<         .current_dir(path)
94,95c125,161
<         let diff = get_diff_result(content, file_path, file_name).unwrap();
<         println!("Diff is {}", diff);
---
>         let expected = "1c1,3
> < Hello, World !
> ---
> > Hello
> > World
> > ";
>         let diff = get_diff_result(content, file_path, file_name);
>         assert!(diff.is_ok());
>         assert_eq!(diff.unwrap(), expected);
>     }
> 
>     #[test]
>     fn test_parse_diff_result() {
>         let diff = "1c1,3
> < Hello, World !
> ---
> > Hello
> > World
> > ";
>         let expected = vec![Patches::Modified { start: 0, count: 3 }];
> 
>         let parsed = parse_diff_result(diff);
>         assert!(parsed.is_ok());
>         let parsed = parsed.unwrap();
>         assert_eq!(parsed, expected);
>     }
> 
>     #[test]
>     fn test_long_parse_diff_result() {
>         // The diff is in the file `tests/long_diff.txt`
>         let diff = include_str!("../../tests/long_diff.txt");
> 
>         let parsed = parse_diff_result(diff);
>         assert!(parsed.is_ok());
>         let parsed = parsed.unwrap();
>         println!("{:?}", parsed);
> 
